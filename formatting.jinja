{%- macro escape_bash(caller='', before='', after='') %}
  {{- before }}
  {%- filter replace("''", "") %}
    {{- "'" }}
      {{- ((caller() if caller is callable else caller) | replace("'", "'\"'\"'")) }}
    {{- "'" }}
  {%- endfilter %}
  {{- after }}
{%- endmacro %}

{%- macro bash_argument(value, before=' ', after=' ') %}
  {{- escape_bash(caller=value, before=before, after=after) }}
{%- endmacro %}

{%- macro format_shell_exec(shell=none, caller='') %}
  {{- escape_bash(caller=shell if shell is string else '/bin/bash') }} -c {{ escape_bash(caller=caller) }}
{%- endmacro %}

{%- macro format_exec_env_script(env_var, shell=none) %}
  {%- call format_shell_exec(shell='/bin/bash') %}
    {{- escape_bash(caller=shell if shell is string else '/bin/bash') }} <<<"${{ '{' + env_var + '}' }}"
  {%- endcall %}
{%- endmacro %}

{%- macro common_whitespace(lines) %}
  {%- macro space_prefix(line, idx=0) %}
    {%- set c = line[idx] %}
    {%- if c is defined and c == ' ' %}
      {{- space_prefix(line, idx + 1) }}
    {%- else %}
      {{- idx }}
    {%- endif %}
  {%- endmacro %}
  {%- set s=namespace(ws=None) %}
  {%- for line in lines[1:] %}
    {%- if line|trim != '' %}
      {%- set line_spaces = space_prefix(line) %}
      {%- set s.ws = line_spaces if s.ws == None or line_spaces < s.ws else s.ws %}
    {%- endif %}
  {%- endfor %}
  {{- s.ws }}
{%- endmacro %}

{%- macro systemd_string(caller='') %}
  {{- "'" }}
    {{- (caller() if caller is callable else caller) | replace("\\", "\\\\") | replace("'", "\\'") | replace('\n', '\\n') }}
  {{- "'" }}
{%- endmacro %}

{%- macro systemd_shell(shell=none, caller='') %}
  {{- shell if shell is string else '/bin/bash' }} -c {{ systemd_string(caller=caller) }}
{%- endmacro %}

{%- macro systemd_escape(caller='') %}
  {{- salt['cmd.run']('/usr/bin/systemd-escape -- "$user_data"', runas='nobody', python_shell=True, shell='/bin/sh', env={'user_data': caller() if caller is callable else caller}) }}
{%- endmacro %}

{%- set salt_warning = salt['pillar.get']('generated-file-warning-text', "WARNING: This file is automatically generated by salt, and changes to it will be discarded.") -%}

{%- macro sha256sum(task) %}
  {{- salt['cmd.run']("sha256sum", shell='/bin/sh', runas='nobody', stdin=task).split(' ', maxsplit=1)[0] }}
{%- endmacro %}

{%- macro sha256sum_file(file) %}
  {{- salt['cmd.run'](['sha256sum <"$sha_file"'], shell='/bin/sh', python_shell=True, runas='nobody', env={'sha_file': file}).split(' ', maxsplit=1)[0] }}
{%- endmacro %}

{%- macro yaml_escape(caller='', quote=none) %}
  {{- ((caller() if caller is callable else caller) | replace("\\", "\\\\") | replace(quote, "\\" + (quote if quote is string else "\"")) | replace("\n", "\\n")) }}
{%- endmacro %}

{%- macro yaml_string(caller='') %}
  {{- '"' }}{{- yaml_escape(caller = caller, quote = "\"") }}{{- '"' }}
{%- endmacro -%}

{%- macro qube_name(name) %}
  {%- set numbers = "0123456789" %}
  {%- set characters = "abcdefghijklmnopqrstuvwxyz" %}
  {%- set specials = "-_" %}
  {%- set legal = (numbers + characters + specials) | list %}
  {{- name | list | select("in", legal) | join }}
{%- endmacro %}

{%- macro unique_lines(separator=none, caller='') %}
  {{- (caller() if caller is callable else caller).split(separator if separator is string else '\n', maxsplit=-1) | unique | join(separator if separator is string else '\n') }}
{%- endmacro %}
