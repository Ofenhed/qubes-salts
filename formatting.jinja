{%- macro escape_bash(caller='', before='', after='') %}
  {{- before + "'" }}
    {{- ((caller() if caller is callable else caller) | replace("'", "'\"'\"'")) }}
  {{- "'" + after }}
{%- endmacro %}

{%- macro bash_argument(value, before=' ', after=' ') %}
  {{- escape_bash(caller=value, before=before, after=after) }}
{%- endmacro %}

{%- macro format_shell_exec(shell=none, caller='') %}
  {{- escape_bash(caller=shell if shell is string else '/bin/bash') }} -c {{ escape_bash(caller=caller) }}
{%- endmacro %}

{%- macro format_exec_env_script(env_var, shell=none) %}
  {%- call format_shell_exec(shell='/bin/sh') %}
    {{- escape_bash(caller=shell if shell is string else '/bin/bash') }} <<< "${{ '{' + env_var + '}' }}"
  {%- endcall %}
{%- endmacro %}

{%- macro systemd_string(caller='') %}
  {{- "'" }}
    {{- ((caller() if caller is callable else caller) | replace("\\", "\\\\") | replace("'", "\\'")).split('\n', maxsplit=-1) | map('trim') | select('ne', '') | join('\\n') }}
  {{- "'" }}
{%- endmacro %}

{%- macro systemd_shell(shell=none, caller='') %}
  {{- shell if shell is string else '/bin/bash' }} -c {{ systemd_string(caller=caller) }}
{%- endmacro %}

{%- set salt_warning = salt['pillar.get']('generated-file-warning-text', "WARNING: This file is automatically generated by salt, and changes to it will be discarded.") -%}

{%- macro sha256sum(task) %}
  {{- salt['cmd.run'](["bash", "-c", 'sha256sum <<<"$sha_data" | awk "{ print \\$1 }"'], runas='nobody', env={'sha_data': task}).split(' ', maxsplit=1)[0] }}
{%- endmacro %}

{%- macro sha256sum_file(file) %}
  {{- salt['cmd.run'](["bash", "-c", 'sha256sum <"$sha_file" | awk "{ print \\$1 }"'], env={'sha_file': file}).split(' ', maxsplit=1)[0] }}
{%- endmacro %}

{%- macro yaml_escape(caller='', quote=none) %}
  {{- ((caller() if caller is callable else caller) | replace("\\", "\\\\") | replace(quote, "\\" + (quote if quote is string else "\"")) | replace("\n", "\\n")) }}
{%- endmacro %}

{%- macro yaml_string(caller='') %}
  {{- '"' }}{{- yaml_escape(caller = caller, quote = "\"") }}{{- '"' }}
{%- endmacro -%}

{%- macro qube_name(name) %}
  {%- set numbers = "0123456789" %}
  {%- set characters = "abcdefghijklmnopqrstuvwxyz" %}
  {%- set specials = "-_" %}
  {%- set legal = (numbers + characters + specials) | list %}
  {{- name | list | select("in", legal) | join }}
{%- endmacro %}

{%- macro unique_lines(separator=none, caller='') %}
  {{- (caller() if caller is callable else caller).split(separator if separator is string else '\n', maxsplit=-1) | unique | join(separator if separator is string else '\n') }}
{%- endmacro %}
