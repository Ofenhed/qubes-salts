# -*- coding: utf-8 -*-
# vim: set syntax=yaml ts=2 sw=2 sts=2 et :

{% from "formatting.jinja" import salt_warning %}
{% from "dependents.jinja" import add_dependencies %}

{% set p = "Systemd ask password caps indicator " %}
{% set module_name = "systemd-ask-password-caps-indicator" %}
{% set mod_dir = "/lib/dracut/modules.d/90" + module_name %}
{% set override_name = "systemd-ask-password-override.conf" %}
{% set password_caps_lock_indicator_service_name = "password-caps-lock-indicator.service" %}
{% set password_caps_lock_indicator_service_path = "/usr/lib/systemd/system/" + password_caps_lock_indicator_service_name %}
{% set set_leds_name = "set-tty-leds" %}
{% set set_leds_dir = "/usr/bin" %}


{% if grains['id'] == 'dom0' %}
{{ mod_dir }}:
  file.directory:
    - user: root
    - group: root
    - mode: 755
    - makedirs: false
    
{{p}}setup:
  file.managed:
    - name: {{ mod_dir }}/module-setup.sh
    - user: root
    - group: root
    - mode: 555
    - replace: true
    - require_in:
      - file: {{ mod_dir }}
    - contents: |
        #!/usr/bin/bash
        # This file is part of dracut.
        # WARNING: This file is automatically generated by salt, and changes to it will be discarded.
        # SPDX-License-Identifier: GPL-2.0-or-later
        
        # Prerequisite check(s) for module.
        check() {
            require_binaries setleds || return 1
        
            # Return 255 to only include the module, if another module requires it.
            return 255
        }
        
        # Module dependency requirements.
        depends() {
            # This module has external dependency on other module(s).
            echo systemd-ask-password
            # Return 0 to include the dependent module(s) in the initramfs.
            return 0
        }
        
        # Install the required file(s) and directories for the module in the initramfs.
        install() {
            # Install required libraries.
            inst "$moddir/{{ set_leds_name }}" "{{ set_leds_dir }}/{{ set_leds_name }}"
            #if dracut_module_included "plymouth"; then
            #    inst "$moddir/{{ override_name }}" "/etc/systemd/system/systemd-ask-password-plymouth.service.d/override.conf"
            #fi
            #inst "$moddir/{{ override_name }}" "/etc/systemd/system/systemd-ask-password-console.service.d/override.conf"
            #inst "$moddir/{{ override_name }}" "/etc/systemd/system/systemd-ask-password-wall.service.d/override.conf"
            inst_multiple setleds {{ password_caps_lock_indicator_service_path }}
            $SYSTEMCTL -q --root "$initdir" enable {{ password_caps_lock_indicator_service_name }}
        }

{{p}}dracut_conf:
  file.managed:
    - name: /lib/dracut/dracut.conf.d/90-ask-password-setleds.conf
    - user: root
    - group: root
    - mode: 444
    - replace: true
    - contents: |
        # {{ salt_warning }}
        add_dracutmodules+=" {{ module_name }} "

{{p}}service:
  file.managed:
    - name: {{ password_caps_lock_indicator_service_path }}
    - user: root
    - group: root
    - mode: 444
    - replace: true
    - require_in:
      - file: {{ mod_dir }}
    - contents: |
        # {{ salt_warning }}
        [Unit]
        Description=Activate caps lock LED during password input
        After=basic.target
        Before=cryptsetup.target
        Conflicts=cryptsetup.target
        
        [Service]
        Type=oneshot
        ExecStart={{ set_leds_dir }}/{{ set_leds_name }} -L +caps
        ExecStop={{ set_leds_dir }}/{{ set_leds_name }} -L -caps
        ExecStop={{ set_leds_dir }}/{{ set_leds_name }} -L
        RemainAfterExit=yes
        
        [Install]
        WantedBy=systemd-ask-password-plymouth.service systemd-ask-password-wall.service systemd-ask-password-console.service

{{p}}set_leds:
  file.managed:
    - name: {{ mod_dir }}/{{ set_leds_name }}
    - user: root
    - group: root
    - mode: 555
    - replace: true
    - require_in:
      - file: {{ mod_dir }}
    - contents: |
        #!/bin/sh
        i=1
        # 6 is the default value of the NAutoVTs option of the systemd login manager
        while [ "${i}" -le 6 ]; do
            setleds "$@" < /dev/tty"${i}"
            i=$((i + 1))
        done

{% call add_dependencies('daemon-reload') %}
  - file: {{p}}service
{% endcall %}

{% call add_dependencies('dracut') %}
  - file: {{p}}setup
  - file: {{p}}dracut_conf
  - file: {{p}}set_leds
  - file: {{p}}service
{% endcall %}

{% endif %}
