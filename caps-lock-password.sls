# -*- coding: utf-8 -*-
# vim: set syntax=yaml ts=2 sw=2 sts=2 et :

{%- from "formatting.jinja" import salt_warning, systemd_shell %}
{%- from "dependents.jinja" import add_dependencies %}

{%- set p = "Systemd ask password caps indicator - " %}
{%- set module_name = "systemd-ask-password-caps-indicator" %}
{%- set mod_dir = "/lib/dracut/modules.d/91" + module_name %}
{%- set systemd_dir = "/usr/lib/systemd/system" %}
{%- set password_caps_lock_indicator_service_name = "password-caps-lock-indicator" %}
{%- set password_caps_lock_indicator_service_filename = password_caps_lock_indicator_service_name + ".service" %}
{%- set set_leds_name = "set-tty-leds" %}
{%- set set_leds_dir = "/usr/bin" %}


{%- if grains['id'] == 'dom0' %}
{{ mod_dir }}:
  file.directory:
    - user: root
    - group: root
    - mode: 755
    - makedirs: false
    
{{p}}setup:
  file.managed:
    - name: {{ mod_dir }}/module-setup.sh
    - user: root
    - group: root
    - mode: 555
    - replace: true
    - require:
      - file: {{ mod_dir }}
    - contents: |
        #!/usr/bin/bash
        # WARNING: This file is automatically generated by salt, and changes to it will be discarded.
        # SPDX-License-Identifier: GPL-2.0-or-later
        
        # Prerequisite check(s) for module.
        check() {
            if ! require_binaries sh setleds flock sleep wc; then
                echo "Missing required binaries"
                return 1
            fi
        
            if ! dracut_module_included crypt; then
                echo "Missing module crypt"
                return 1
            fi
            # Return 255 to only include the module, if another module requires it.
            return 0
        }
        
        # Module dependency requirements.
        depends() {
            # This module has external dependency on other module(s).
            echo systemd-ask-password
            # Return 0 to include the dependent module(s) in the initramfs.
            return 0
        }
        
        # Install the required file(s) and directories for the module in the initramfs.
        install() {
            # Install required libraries.
            inst "$moddir/{{ set_leds_name }}" "{{ set_leds_dir }}/{{ set_leds_name }}"
            inst "$moddir/{{ password_caps_lock_indicator_service_filename }}" "{{ systemd_dir }}/{{ password_caps_lock_indicator_service_filename }}"
            inst_multiple sh setleds wc flock sleep
            $SYSTEMCTL -q --root "$initdir" enable '{{ password_caps_lock_indicator_service_filename }}'
        }

{{p}}service:
  file.managed:
    - name: {{ mod_dir }}/{{ password_caps_lock_indicator_service_filename }}
    - user: root
    - group: root
    - mode: 444
    - replace: true
    - require:
      - file: {{ mod_dir }}
    - contents: |
        # {{ salt_warning }}
        [Unit]
        Description=Activate caps lock LED during password input
        After=basic.target
        Before=cryptsetup.target
        Conflicts=cryptsetup.target
        
        [Service]
        Type=simple
        ExecStart={%- call systemd_shell('sh') %}
        while true ; do
            if [[ $(systemctl list-units -q --state=activating 'systemd-cryptsetup@*.service' | wc -l) -eq 0 ]]; then
                sleep 0.5
                continue
            fi
            count=$(systemctl list-units -q --state=active 'systemd-cryptsetup@*.service' | wc -l)
            for ((i=0;i<=count;i++)); do
                {{ set_leds_dir }}/{{ set_leds_name }} -L +caps
                sleep 0.25
                {{ set_leds_dir }}/{{ set_leds_name }} -L -caps
                sleep 0.25
            done
            sleep 1
        done
        {%- endcall %}
        ExecStopPost={{ set_leds_dir }}/{{ set_leds_name }} -L -caps
        ExecStopPost={{ set_leds_dir }}/{{ set_leds_name }} -L
        
        [Install]
        WantedBy=systemd-ask-password-plymouth.service systemd-ask-password-wall.service systemd-ask-password-console.service

{{p}}set_leds:
  file.managed:
    - name: {{ mod_dir }}/{{ set_leds_name }}
    - user: root
    - group: root
    - mode: 555
    - replace: true
    - require:
      - file: {{ mod_dir }}
    - contents: |
        #!/bin/sh
        i=1
        # 6 is the default value of the NAutoVTs option of the systemd login manager
        while [ "${i}" -le 6 ]; do
            setleds "$@" < /dev/tty"${i}"
            i=$((i + 1))
        done

{%- call add_dependencies('dracut') %}
  - file: {{p}}service
  - file: {{p}}set_leds
  - file: {{p}}setup
{%- endcall %}

{%- endif %}
